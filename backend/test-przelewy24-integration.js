const axios = require('axios');
const crypto = require('crypto');
const qs = require('qs');

// Konfiguracja testowa
const config = {
  merchantId: '269321',
  posId: '269321',
  crc: '1a2b3c4d5e6f7',
  baseUrl: 'https://sandbox.przelewy24.pl'
};

// Generowanie p24_sign zgodnie z dokumentacjƒÖ
function generateP24Sign(sessionId, merchantId, amount, currency, crc) {
  const data = `${sessionId}|${merchantId}|${amount}|${currency}|${crc}`;
  console.log(`Generowanie p24_sign dla danych: ${data}`);
  return crypto.createHash('md5').update(data).digest('hex');
}

// Test rejestracji p≈Çatno≈õci
async function testPaymentRegistration() {
  try {
    console.log('=== TEST REJESTRACJI P≈ÅATNO≈öCI PRZELEWY24 ===');
    
    const sessionId = `test_session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const amount = 9.99;
    const currency = 'PLN';
    const description = 'Test p≈Çatno≈õci - Plan Premium';
    const email = 'test@example.com';
    
    console.log(`Session ID: ${sessionId}`);
    console.log(`Kwota: ${amount} ${currency}`);
    console.log(`Opis: ${description}`);
    console.log(`Email: ${email}`);
    
    const amountInGrosz = Math.round(amount * 100);
    console.log(`Kwota w groszach: ${amountInGrosz}`);
    
    // Generowanie p24_sign
    const p24Sign = generateP24Sign(
      sessionId,
      config.merchantId,
      amountInGrosz,
      currency,
      config.crc
    );
    
    console.log(`p24_sign: ${p24Sign}`);
    
    // Przygotowanie danych do rejestracji
    const registerData = {
      p24_merchant_id: config.merchantId,
      p24_pos_id: config.posId,
      p24_api_version: '3.2',
      p24_session_id: sessionId,
      p24_amount: amountInGrosz,
      p24_currency: currency,
      p24_description: description,
      p24_email: email,
      p24_country: 'PL',
      p24_language: 'pl',
      p24_url_return: 'https://example.com/payment-success',
      p24_url_status: 'https://example.com/api/przelewy24/status',
      p24_sign: p24Sign
    };
    
    console.log('Dane do rejestracji:', registerData);
    
    // Konwersja danych do formatu x-www-form-urlencoded
    const formData = qs.stringify(registerData);
    console.log('Form data:', formData);
    
    // Wys≈Çanie ≈ºƒÖdania do Przelewy24
    console.log(`Wysy≈Çanie ≈ºƒÖdania do: ${config.baseUrl}/trnRegister`);
    const response = await axios.post(
      `${config.baseUrl}/trnRegister`,
      formData,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 30000
      }
    );
    
    console.log('Status odpowiedzi:', response.status);
    console.log('Headers odpowiedzi:', response.headers);
    console.log('Odpowied≈∫ Przelewy24:', response.data);
    
    if (response.data && response.data.token) {
      console.log(`‚úÖ Token otrzymany: ${response.data.token}`);
      console.log(`üîó URL przekierowania: ${config.baseUrl}/trnRequest/${response.data.token}`);
      return {
        success: true,
        token: response.data.token,
        sessionId: sessionId,
        redirectUrl: `${config.baseUrl}/trnRequest/${response.data.token}`
      };
    } else {
      console.error('‚ùå Brak tokenu w odpowiedzi Przelewy24');
      console.error('Pe≈Çna odpowied≈∫:', response.data);
      return {
        success: false,
        error: 'Brak tokenu w odpowiedzi Przelewy24'
      };
    }
    
  } catch (error) {
    console.error('üí• B≈ÇƒÖd testu rejestracji p≈Çatno≈õci:', error);
    console.error('Error details:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status
    });
    return {
      success: false,
      error: error.message
    };
  }
}

// Test weryfikacji p≈Çatno≈õci
async function testPaymentVerification(sessionId, amount, currency = 'PLN') {
  try {
    console.log('=== TEST WERYFIKACJI P≈ÅATNO≈öCI PRZELEWY24 ===');
    
    const amountInGrosz = Math.round(amount * 100);
    
    // Generowanie p24_sign dla weryfikacji
    const p24Sign = generateP24Sign(
      sessionId,
      config.merchantId,
      amountInGrosz,
      currency,
      config.crc
    );
    
    const verifyData = {
      p24_merchant_id: config.merchantId,
      p24_pos_id: config.posId,
      p24_session_id: sessionId,
      p24_amount: amountInGrosz,
      p24_currency: currency,
      p24_sign: p24Sign
    };
    
    console.log('Dane weryfikacji:', verifyData);
    
    // Konwersja danych do formatu x-www-form-urlencoded
    const formData = qs.stringify(verifyData);
    
    // Wys≈Çanie ≈ºƒÖdania weryfikacji do Przelewy24
    const response = await axios.post(
      `${config.baseUrl}/trnVerify`,
      formData,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        timeout: 30000
      }
    );
    
    console.log('Status odpowiedzi weryfikacji:', response.status);
    console.log('Odpowied≈∫ weryfikacji:', response.data);
    
    if (response.data && response.data.error === '0') {
      console.log('‚úÖ P≈Çatno≈õƒá zweryfikowana pomy≈õlnie');
      return {
        success: true,
        verified: true
      };
    } else {
      console.error('‚ùå B≈ÇƒÖd weryfikacji p≈Çatno≈õci:', response.data);
      return {
        success: false,
        error: response.data.errorMessage || 'Nieznany b≈ÇƒÖd weryfikacji'
      };
    }
    
  } catch (error) {
    console.error('üí• B≈ÇƒÖd testu weryfikacji p≈Çatno≈õci:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// G≈Ç√≥wna funkcja testowa
async function runTests() {
  console.log('üöÄ Rozpoczynam testy integracji Przelewy24...\n');
  
  // Test 1: Rejestracja p≈Çatno≈õci
  console.log('üìã TEST 1: Rejestracja p≈Çatno≈õci');
  const registrationResult = await testPaymentRegistration();
  
  if (registrationResult.success) {
    console.log('\n‚úÖ Test rejestracji zako≈Ñczony sukcesem!');
    console.log(`Token: ${registrationResult.token}`);
    console.log(`Session ID: ${registrationResult.sessionId}`);
    console.log(`URL przekierowania: ${registrationResult.redirectUrl}`);
    
    // Test 2: Weryfikacja p≈Çatno≈õci (opcjonalny)
    console.log('\nüìã TEST 2: Weryfikacja p≈Çatno≈õci (symulacja)');
    console.log('‚ö†Ô∏è Uwaga: Ten test wymaga rzeczywistej p≈Çatno≈õci w Przelewy24');
    console.log('Mo≈ºesz go uruchomiƒá po dokonaniu p≈Çatno≈õci w sandboxie');
    
    // Odkomentuj poni≈ºszƒÖ liniƒô, aby przetestowaƒá weryfikacjƒô
    // await testPaymentVerification(registrationResult.sessionId, 9.99);
    
  } else {
    console.log('\n‚ùå Test rejestracji zako≈Ñczony b≈Çƒôdem!');
    console.log(`B≈ÇƒÖd: ${registrationResult.error}`);
  }
  
  console.log('\nüèÅ Testy zako≈Ñczone!');
}

// Uruchom testy je≈õli plik jest uruchamiany bezpo≈õrednio
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testPaymentRegistration,
  testPaymentVerification,
  generateP24Sign
}; 